name: Deploy Usuarios Service

on:
  push:
    branches:
      - main
      - test-workflow

env:
  SERVICE_NAME: usuarios-service
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/usuarios-service
  K8S_DIR: kubernetes

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and test
        run: |
          mvn clean package
          mvn test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          docker push ${{ env.DOCKER_IMAGE }}:latest

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube version

      - name: Start Minikube
        run: |
          minikube start --driver=docker
          minikube addons enable ingress
          minikube addons enable metrics-server

      - name: Deploy to Minikube
        run: |
          # Configurar el entorno de Docker de Minikube
          eval $(minikube -p minikube docker-env)
          # Construir la imagen en el entorno de Minikube
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          # Reemplazar variables en los archivos de Kubernetes
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          envsubst < ${{ env.K8S_DIR }}/deployment.yml > ${{ env.K8S_DIR }}/deployment-processed.yml
          # Aplicar los manifiestos de Kubernetes
          kubectl apply -f ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/service.yml
          # Verificar el estado de los pods
          kubectl get pods
          kubectl describe pods
          # Esperar a que el despliegue esté listo
          kubectl rollout status deployment/${{ env.SERVICE_NAME }}-deployment --timeout=120s

      - name: Verify deployment
        run: |
          # Esperar a que el servicio esté listo
          sleep 30
          # Obtener la IP de Minikube
          MINIKUBE_IP=$(minikube ip)
          # Verificar health endpoint
          curl -sSf http://$MINIKUBE_IP:30080/actuator/health
          # Verificar prometheus endpoint
          curl -sSf http://$MINIKUBE_IP:30080/actuator/prometheus | head -n 5

      - name: Cleanup
        if: always()
        run: |
          minikube stop
          minikube delete
  deploy-to-gke:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: cluster-1
          location: us-central1
          project_id: gcp-despliegue-desarrollo

      - name: Deploy to GKE
        run: |
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          envsubst < ${{ env.K8S_DIR }}/deployment.yml > ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/service.yml
          kubectl rollout status deployment/${{ env.SERVICE_NAME }}-deployment --timeout=120s
